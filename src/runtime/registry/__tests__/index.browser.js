import registry, { loader } from "../index.browser.js";
import Junction from "../../../junction";

import { newLifecycle } from "../util/browser";

function mockFunctions() {
  const original = require.requireActual("../util/browser");
  return {
    ...original, //Pass down all the exported objects
    newLifecycle: jest.fn(original.newLifecycle),
  };
}
jest.mock("../util/browser", () => mockFunctions());

describe("loader", () => {
  it("uses the lifecycle hoc", () => {
    const WithLoader = loader(() => null);
    expect(typeof WithLoader).toBe("function");
    expect(WithLoader.displayName).toBe("lifecycle(Component)");
  });
  it("is called with dynamic imports", async () => {
    const [blocks, layouts] = newLifecycle.mock.calls[0];
    const { default: Block } = await blocks("Counter");
    const { default: Layout } = await layouts("Horizontal");
    expect(typeof Block).toEqual("function");
    expect(typeof Layout).toEqual("function");
  });
});

describe("registry", () => {
  it("should wrap with junction", () => {
    expect(registry).toBeInstanceOf(Junction);
  });

  it("should be wrapped with correct hoc's", () => {
    const component = registry.render(<div />);
    // displayName is generated by recompose
    expect(component.displayName).toBe(
      "withState(lifecycle(mapProps(branch(Component))))",
    );
  });
});
